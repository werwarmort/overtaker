{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    "module": "ESNext",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es5",
    "jsx": "react-jsx",
    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    "baseUrl": ".",
    "moduleResolution": "node",
    // esModuleInterop позволяет работать с пакетами, которые используют
    // common js как с обычными пакета с помощью import (require() module.export) = common js
    // import Moment from 'moment';
    // без флага esModuleInterop результат undefined
    // console.log(Moment);
    // c флагом результат [object Object]
    // console.log(Moment);
    "esModuleInterop": true,
    // Если какая-либо библиотека не имеет default import,
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
    "allowSyntheticDefaultImports": true
  },
  // ts-node — это отдельный инструмент (не tsc), который позволяет запускать TypeScript-файлы напрямую
  // без предварительной компиляции в JS.

  // У него могут быть свои опции, отличные от compilerOptions, которые нужны именно для работы рантайма, а не билдера.

  // Секция "ts-node" в tsconfig.json предназначена исключительно для ts-node и не влияет на обычную компиляцию tsc.

  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS", // при запуске TS-файлов нужно компилировать модули в CommonJS, а не в ESNext.
    }
  }
}